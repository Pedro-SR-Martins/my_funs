plotInfo <- function(fit_model = x,
                     detail = .1,
                     min_theta = -6,
                     max_theta = 6,
                     breaks_theta = .5){
  require(mirt)
  require(tidyverse)
  Theta <- matrix(seq(min_theta,max_theta, by = detail))
  Information <- testinfo(fit_model,
                          Theta = matrix(seq(min_theta,max_theta, 
                                             by = detail)))
  p1<-plot(fit_model, type = "SE", 
           theta_lim = c(min_theta,max_theta), npts = length(Theta))
  error <- p1[["panel.args"]][[1]][["y"]] %>% 
    data.frame() %>% rename(Error = '.')
  
  p2 <- cbind(Theta, Information, error) %>% 
    data.frame() %>% 
    pivot_longer(cols = Information:Error) %>% 
    ggplot(aes(x = Theta, y = value, color = name, linetype = name))+
    geom_line(size = 1)+
    scale_x_continuous(breaks = seq(from = min_theta, 
                                    to = max_theta, 
                                    by = breaks_theta))+
    scale_y_continuous(limits = c(0, NA))+
    scale_linetype_manual(values = c("longdash", "solid"))+
    scale_color_manual(values = c("gray80", "black"))+
    labs(y = expression(I(theta)), color = "Model", 
         linetype = "Model", x = expression(theta))+
    theme(axis.text.x = element_text(colour="black",size=12),
          text = element_text(size=16, family = "serif"),
          panel.background = element_blank(), 
          legend.key = element_rect(fill = "white"),
          legend.position = "bottom",
          axis.line = element_line(colour = "black"),
          strip.background = element_rect(colour="black", fill="white"),
          axis.text.y = element_text(colour="black",size=12))
  
  Info_values <- cbind(Theta, Information, error) %>% 
    data.frame()
  output <- list(plot = p2, Info_values = Info_values)
  return(output)
}


plotTrace <- function(fit_model = fit_model,
                      detail = .01,
                      min_theta = -4,
                      max_theta = 4,
                      breaks_theta = 1,
                      main = 'Item Tracelines',
                      ncol_plot = 5){
  probtrace(fit_model,
            Theta = matrix(seq(min_theta,
                               max_theta, 
                               by = detail))) %>% 
    data.frame() %>% 
    tibble() %>% 
    mutate(theta = as.numeric(matrix(seq(min_theta,
                                         max_theta, 
                                         by = detail)))) %>% 
    pivot_longer(cols = c(-theta)) %>% 
    separate(col = name,
             sep = "\\.P\\.",
             into = c("item","prob")) %>% 
    mutate(prob = paste0("P.",prob)) %>% 
    mutate(item = factor(item)) %>% 
    pivot_wider(id_cols = c(theta, item),
                names_from = prob, 
                values_from = value) %>% 
    arrange(theta) %>% 
    ggplot(aes(x = theta,
               y = P.1, 
               group = item)) + 
    geom_line(size = 1,
              color = "black"
    ) + 
    scale_x_continuous(breaks = seq(from = min_theta, 
                                    to = max_theta, 
                                    by = breaks_theta))+
    ggtitle(main) + 
    xlab(expression(theta)) + 
    ylab(expression(P(theta))) + 
    geom_hline(aes(yintercept = 0.5)) + 
    facet_wrap(item~., , scales = "free_x",
               ncol = ncol_plot)+
    theme_classic() + 
    theme(text = element_text(size=16, family = "serif"),
          axis.text.x=element_text(colour="black", size = 12),
          axis.text.y=element_text(colour="black"),
          legend.title=element_blank(), 
          legend.position = "none")
}

reliability_mirt <- function(fit_model = fit_model){
  require(mirt)
  empirical <- fscores(fit_model, full.scores.SE = TRUE) %>% 
    empirical_rxx(.) %>% round(.,2)
  marginal <- marginal_rxx(fit_model) %>% round(.,2)
  return(data.frame(empirical, marginal))
}


plotTracePoly <- function(fit_model = fit_model,
                      detail = .001,
                      min_theta = -4,
                      max_theta = 4,
                      breaks_theta = 1,
                      main = 'Item Tracelines',
                      ncol_plot = 5){
  probtrace(fit_model,
            Theta = matrix(seq(min_theta,
                               max_theta, 
                               by = detail))) %>% 
    data.frame() %>% 
    tibble() %>% 
    mutate(theta = as.numeric(matrix(seq(min_theta,
                                         max_theta, 
                                         by = detail)))) %>% 
    pivot_longer(cols = c(-theta)) %>% 
    separate(col = name,
             sep = "\\.P\\.",
             into = c("item","prob")) %>% 
    mutate(prob = paste0("P.",prob)) %>% 
    mutate(item = factor(item)) %>% 
    ggplot(aes(x = theta,
               y = value, 
               linetype = prob,
               
               color = prob)) + 
    geom_line(linewidth = 1) + 
    scale_x_continuous(breaks = seq(from = min_theta, 
                                    to = max_theta, 
                                    by = breaks_theta))+
    ggtitle(main) + 
    xlab(expression(theta)) + 
    ylab(expression(P(theta))) + 
    facet_wrap(item~., , scales = "free_x",
               ncol = ncol_plot)+
    theme_classic() + 
    theme(panel.background = element_blank(), 
          # panel.grid.major = element_line(linewidth = 0.5, 
          #                                 linetype = 'solid',
          #                                 colour = "lightgrey"), 
          # panel.grid.minor = element_line(linewidth = 0.25, 
          #                                 linetype = 'solid',
          #                                 colour = "lightgrey"),
          panel.border = element_rect(colour = "black", fill=NA),
          axis.line = element_line(color = "black"),
          axis.ticks.y = element_blank(),
          axis.text.y = element_text(colour="black", size = 10),
          axis.text.x = element_text(colour="black", size = 10),
          text = element_text(size = 15), legend.title=element_blank(), 
          legend.box = element_blank(),
          legend.frame = element_blank(),
          legend.position="bottom")
}
